<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/04/19/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
      <url>/2025/04/19/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><h1 id="一、命名空间"><a href="#一、命名空间" class="headerlink" title="一、命名空间"></a>一、命名空间</h1><h2 id="一、为什么定义命名空间"><a href="#一、为什么定义命名空间" class="headerlink" title="一、为什么定义命名空间"></a>一、为什么定义命名空间</h2><p>一个大型的工程往往是由若干个人独立完成的，不同的人分别完成不同的部分，最后再组合成一个完整的程序。由于各个头文件是由不同的人设计的，有可能在不同的头文件中用了相同的名字来命名所定义的类或函数，这样在程序中就会出现名字冲突。不仅如此，有可能我们自己定义的名字会与 C++ 库中的名字发生冲突。名字冲突就是在同一个作用域中有两个或多个同名的实体，为了解决<strong>命名冲突</strong> ，C++ 中引入了命名空间，所谓命名空间就是一个可以由用户自己定义的作用域，在不同的作用域中可以定义相同名字的变量，互不干扰，系统能够区分它们。</p><h2 id="二、什么是命名空间"><a href="#二、什么是命名空间" class="headerlink" title="二、什么是命名空间"></a>二、什么是命名空间</h2><ol><li>命名空间又称为名字空间，是程序员命名的内存区域，程序员根据需要指定一些有名字的空间域，把一些全局实体分别存放到各个命名空间中，从而与其他全局实体分隔开。通俗的说，每个名字空间都是一个名字空间域，存放在名字空间域中的全局实体只在本空间域内有效。名字空间对全局实体加以域的限制，从而合理的解决命名冲突。</li><li>C 语言中可以将命名加以修饰 HWProjectACppPrint，这样可以解决冲突的问题。<br>提出命名空间的原因就是为了解决名字冲突的。</li><li>C++ 中定义命名空间的基本格式如下：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名称</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 定义实体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>【注】：命名空间中可以定义变量、常量、函数（定义或者声明）、结构体、类、模版命名空间（可嵌套），将这些统称为实体。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>; <span class="comment">// 普通变量    </span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Foo</span> <span class="comment">// 结构体</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        <span class="type">int</span> val; </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>; <span class="comment">// 声明了一个函数</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">// end of namespace wd</span></span><br></pre></td></tr></table></figure><ol start="4"><li>定义在名称空间中的变量或者函数都称为 <strong>实体</strong>，名称空间中的实体作用域是全局的, 并不意味着其可见域是全局的。如果不使用作用域限定符和 using 机制，抛开名称空间嵌套和内部屏蔽的情况，实体的可见域是从实体创建到该名称空间结束。在名称空间外，该实体是不可见的。</li><li><strong>如何访问命名空间中的实体呢？</strong></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>; <span class="comment">// 普通变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> <span class="comment">// 函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void wd::print()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="comment">// end of namespace wd</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;number = &quot;</span> &lt;&lt; wd::number &lt;&lt; endl; <span class="comment">// 命令空间的名字 + 作用域限定符</span></span><br><span class="line">        wd::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737508056807.png" alt="1737508056807"></p><blockquote><p><strong>总结：使用 命名空间的名字 + 作用域限定符 ( :: ) + 实体名 的形式</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//d/y + 目标行号 + G(删除/拷贝多行)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//命名空间中可以定义变量、函数、结构体、类等等，将这些统称为实体</span></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;<span class="comment">//变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span><span class="comment">//函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void print&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">MyStruct</span><span class="comment">//结构体</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of namespace wd </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如何访问命名空间中的实体？</span></span><br><span class="line"><span class="comment">//命名空间的名字 + 作用域限定符（::） + 实体名</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//在vimplus下面，有快捷注释的方式ngcc---&gt;n代表的是数字</span></span><br><span class="line">    <span class="comment">//ngcc在按第二次就会取消注释</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;number = &quot;</span> &lt;&lt; wd::number &lt;&lt; endl;</span><br><span class="line">    wd::<span class="built_in">print</span>();</span><br><span class="line">    <span class="comment">/* cout &lt;&lt; 1 &lt;&lt; &quot;  &quot; &lt;&lt; &quot;hello&quot; &lt;&lt; &quot;  &quot; &lt;&lt; endl &lt;&lt; 2 &lt;&lt; endl; */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737508042076.png" alt="1737508042076"></p><h2 id="三、命名空间的使用方式（重要）"><a href="#三、命名空间的使用方式（重要）" class="headerlink" title="三、命名空间的使用方式（重要）"></a>三、命名空间的使用方式（重要）</h2><ul><li>命名空间一共有三种使用方式，分别是 using 编译指令、作用域限定符、using 声明机制。</li></ul><h3 id="一、using-编译指令"><a href="#一、using-编译指令" class="headerlink" title="一、using 编译指令"></a>一、using 编译指令</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hell,world&quot;</span> &lt;&lt; endl;     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中第三行就使用了 using 编译指令，<strong>可以一次将命名空间中的所有实体全部引出来</strong>。如果一个名称空间中有多个实体，使用 using 编译指令，就会把该空间中的所有实体一次性引入到程序之中；对于初学者来说，如果对一个命名空间中的实体并不熟悉时，直接使用这种方式，有可能还是会造成名字冲突的问题，而且出现错误之后，还不好查找错误的原因，比如下面的程序就会报错，当然该错误是人为造成的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、using编译指令</span></span><br><span class="line"><span class="comment">//特点：会将标准的std命名空间中的实体全部都引出来</span></span><br><span class="line"><span class="comment">//问题：并不知道std中到底有哪些实体？</span></span><br><span class="line"><span class="comment">//此时就有可能自定义的实体与命名空间中的实体冲突</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>();<span class="comment">//error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737507912550.png" alt="1737507912550"></p><h3 id="二、作用符限定符"><a href="#二、作用符限定符" class="headerlink" title="二、作用符限定符"></a>二、作用符限定符</h3><ul><li>第二种方式就是直接使用作用域限定符 :: ，每次要使用某个名称空间中的实体时，都直接加上，例如：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">cout</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;int cout(int, int)&quot;</span> &lt;&lt; std::endl;     </span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, y = &quot;</span> &lt;&lt; y &lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优点：即使自定义变量、函数等与命名空间中的实体冲突也没有关系。<br>缺点：每次都那么写，使用起来比较麻烦。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、作用域限定符的形式</span></span><br><span class="line"><span class="comment">//优点：即使自定义的实习与标准命名空间中的实体冲突也没有问题</span></span><br><span class="line"><span class="comment">//缺点：写起来的时候，非常的繁琐</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cout</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, y = &quot;</span> &lt;&lt; y &lt;&lt;std:: endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello,world&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">cout</span>(<span class="number">3</span>, <span class="number">4</span>);<span class="comment">//ok</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737507921117.png" alt="1737507921117"></p><h3 id="三、using-声明机制（推荐使用）"><a href="#三、using-声明机制（推荐使用）" class="headerlink" title="三、using 声明机制（推荐使用）"></a>三、using 声明机制（推荐使用）</h3><ul><li>类似提取公因式一样，在最小作用域中使用 using 将提取出来。using 声明机制的作用域是从 using 语句开始，到 using 所在的作用域结束。要注意，在同一作用域内用 using 声明的不同的命名空间的成员不能有同名的成员，否则会发生冲突。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout; </span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;wd::display()&quot;</span> &lt;&lt; endl;     </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="comment">// end of namespace wd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> wd::number;  </span><br><span class="line"><span class="keyword">using</span> wd::display;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wd::number = &quot;</span> &lt;&lt; number &lt;&lt; endl;     </span><br><span class="line">    wd::<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优点：简洁、直观。<br>缺点：一次只引出命名空间中的一个实体，不会在出现定义与命名空间中实体冲突的现象。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;<span class="comment">//3、using声明机制(推荐使用)</span></span><br><span class="line"><span class="comment">//需要std中的那个实体就引出来，不需要就不要引出来，这样就能</span></span><br><span class="line"><span class="comment">//明确知道哪些是命名空间中的实体，即使后续用到了与没有引出来</span></span><br><span class="line"><span class="comment">//的实体冲突的，也没有关系，也可以继续使用</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cin</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;x = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, y = &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;hello,world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cin</span>(<span class="number">3</span>, <span class="number">4</span>);<span class="comment">//ok</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737507931341.png" alt="1737507931341"></p><blockquote><p>在这三种方式之中，推荐使用的就是第三种 <strong>using 声明机制</strong>，需要哪个实体的时候就引入到程序中，不需要的实体就不引入，尽可能减小犯错误的概率。</p></blockquote><h3 id="四、带命名空间的函数声明以及命名空间的扩展（次重点）"><a href="#四、带命名空间的函数声明以及命名空间的扩展（次重点）" class="headerlink" title="四、带命名空间的函数声明以及命名空间的扩展（次重点）"></a>四、带命名空间的函数声明以及命名空间的扩展（次重点）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;<span class="comment">//3、using声明机制,一次只引出一个实体</span></span><br><span class="line"><span class="keyword">using</span> std::endl;<span class="comment">//推荐使用using声明机制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//标准命名空间也是可以进行扩展的,不大安全：可能与std里面的实体冲突</span></span><br><span class="line"><span class="comment">//标准命名空间里面的实体都是小写的</span></span><br><span class="line"><span class="keyword">namespace</span> std</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">MyStruct</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of namespace std</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//带命名空间的函数声明</span></span><br><span class="line"><span class="comment">//命名空间是可以定义多次的,可以进行扩展的</span></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;<span class="comment">//end of namespace wd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> mdw</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void mdw::show()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//在此处访问wd中print？</span></span><br><span class="line">        wd::<span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of namespace mdw</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//命令空间里面定义的变量、函数、结构体、类等等统称为实体</span></span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void wd::print()&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//访问mdw中的show函数</span></span><br><span class="line">        mdw::<span class="built_in">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of namespace wd</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mdw::<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737507939303.png" alt="1737507939303"></p><h3 id="五、匿名命名空间"><a href="#五、匿名命名空间" class="headerlink" title="五、匿名命名空间"></a>五、匿名命名空间</h3><ul><li>命名空间还可以不定义名字，不定义名字的命名空间称为<strong>匿名命名空间</strong>。由于没有名字，该空间中的实体，其它文件无法引用，它只能在本文件的作用域内有效，它的作用域是从匿名命名空间声明开始到本文件结束。在本文件使用无名命名空间成员时不必用命名空间限定。其实匿名命名空间和static是同样的道理，都是只在本文件内有效，无法被其它文件引用。</li><li>定义形式：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> val1 = <span class="number">10</span>; </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>; </span><br><span class="line">&#125; <span class="comment">// end of anonymous namespace</span></span><br></pre></td></tr></table></figure><p><strong>使用匿名空间中实体时，可以直接使用，也可以加上作用域限定符（没有空间名）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout; <span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">namespace</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> number = <span class="number">10</span>;<span class="comment">//变量</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span><span class="comment">//函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;void print()&quot;</span> &lt;&lt; endl; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//end of anonymous namespace</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//以下四种方式都是可以的</span></span><br><span class="line">    cout &lt;&lt; number &lt;&lt; endl;<span class="comment">//ok</span></span><br><span class="line">    cout &lt;&lt; ::number &lt;&lt; endl;<span class="comment">//ok</span></span><br><span class="line">    <span class="built_in">print</span>();<span class="comment">//ok</span></span><br><span class="line">    ::<span class="built_in">print</span>();<span class="comment">//ok </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名命名空间与 static 之间的区别：</p><ul><li>对于一组多个标识符函数只需要使用一个匿名空间来声明，不需要多次输入static。</li><li>可以嵌套。这样可以在不同命名空间中使用多个同名的标识符</li></ul><p>C++ 新的标准中提倡使用匿名命名空间,而不推荐使用 static,因为 static 用在不同的地方,涵义不同,容易造成混淆.另外，static 不能修饰 class。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> val = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> number = <span class="number">1</span>;<span class="comment">//全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> number = <span class="number">10</span>;<span class="comment">//命名空间中的实体number</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> number)</span><span class="comment">//函数形参number</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;形参number = &quot;</span> &lt;&lt; number &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;命名空间中的number = &quot;</span> &lt;&lt; wd::number &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局number = &quot;</span> &lt;&lt; ::number &lt;&lt; endl;<span class="comment">//匿名命名空间</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局val = &quot;</span> &lt;&lt; ::val&lt;&lt; endl;<span class="comment">//匿名命名空间</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局val = &quot;</span> &lt;&lt; val&lt;&lt; endl;<span class="comment">//如果没有冲突</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>);<span class="comment">//没有冲突，是唯一的</span></span><br><span class="line">    ::<span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of namespace std</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">300</span>;</span><br><span class="line">    wd::<span class="built_in">print</span>(x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737513994570.png" alt="1737513994570"></p><h3 id="六、命名空间的嵌套"><a href="#六、命名空间的嵌套" class="headerlink" title="六、命名空间的嵌套"></a>六、命名空间的嵌套</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> wd &#123;</span><br><span class="line"><span class="comment">//命名空间的嵌套</span></span><br><span class="line"><span class="comment">//访问：类似于邮局寄信的地址的写法</span></span><br><span class="line">    <span class="keyword">namespace</span> ll </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> number = <span class="number">4000</span>;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;void wd::ll::show()&quot;</span> &lt;&lt; endl; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//end of namespace ll</span></span><br><span class="line">&#125;<span class="comment">//end of namespace wd</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">300</span>;</span><br><span class="line">    wd::<span class="built_in">print</span>(value);</span><br><span class="line">    wd::ll::<span class="built_in">show</span>();<span class="comment">//从wd命名空间开始，一层一层的调用，直到找到实体show</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//命名空间是可以进行嵌套的</span></span><br><span class="line"><span class="comment">//访问的时候：就一层一层的引出来即可</span></span><br><span class="line"><span class="keyword">namespace</span> wd</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> lili</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> number = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;void print()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of namespace lili</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//end of namespace wd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;wd中的number = &quot;</span> &lt;&lt; wd::number &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;lili中的number = &quot;</span> &lt;&lt; wd::lili::number &lt;&lt; endl;</span><br><span class="line">    wd::lili::<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/image/01_%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/1737514399704.png" alt="1737514399704"></p><h3 id="七、对命名空间的思考和总结"><a href="#七、对命名空间的思考和总结" class="headerlink" title="七、对命名空间的思考和总结"></a>七、对命名空间的思考和总结</h3><p>下面引用当前流行的名称空间使用指导原则：</p><ul><li>提倡在已命名的名称空间中定义变量，而不是直接定义外部全局变量或者静态全局变量。</li><li>如果开发了一个函数库或者类库，提倡将其放在一个名称空间中。</li><li>对于 using 声明，首先将其作用域设置为局部而不是全局</li><li>不要在头文件中使用 using 编译指令，这样，使得可用名称变得模糊，容易出现二义性。</li><li>包含头文件的顺序可能会影响程序的行为，如果非要使用 using 编译指令，建议放在所有 #include 预编译指令后。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/18/hello-world/"/>
      <url>/2025/04/18/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="http://xxx/aplayer.min.css"><script src="http://xxx/aplayer.min.js" class="aplayer-secondary-script-marker"></script><script>var meting_api='http://xxx/api.php?server=:server&type=:type&id=:id&r=:r'</script><script class="meting-secondary-script-marker" src="http://xxx/Meing.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
